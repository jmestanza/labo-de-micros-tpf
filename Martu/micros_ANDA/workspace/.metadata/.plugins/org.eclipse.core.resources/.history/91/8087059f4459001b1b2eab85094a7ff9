
/*******************************************************************************
* Copyright (C) 2016 Maxim Integrated Products, Inc., All Rights Reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a
* copy of this software and associated documentation files (the "Software"),
* to deal in the Software without restriction, including without limitation
* the rights to use, copy, modify, merge, publish, distribute, sublicense,
* and/or sell copies of the Software, and to permit persons to whom the
* Software is furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included
* in all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
* OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
* IN NO EVENT SHALL MAXIM INTEGRATED BE LIABLE FOR ANY CLAIM, DAMAGES
* OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
* OTHER DEALINGS IN THE SOFTWARE.
*
* Except as contained in this notice, the name of Maxim Integrated
* Products, Inc. shall not be used except as stated in the Maxim Integrated
* Products, Inc. Branding Policy.
*
* The mere transfer of this software does not imply any licenses
* of trade secrets, proprietary technology, copyrights, patents,
* trademarks, maskwork rights, or any other form of intellectual
* property whatsoever. Maxim Integrated Products, Inc. retains all
* ownership rights.
*******************************************************************************
*/
#include "o2.h"
#include "i2c_config.h"



bool maxim_max30102_write_reg(uint8_t uch_addr, uint8_t uch_data)
{
    uint8_t ach_i2c_data = uch_data;
	bool ans = i2cWriteMsgBlocking (I2C_WRITE_ADDR, &ach_i2c_data, 1, uch_addr);

	return ans;
}

bool maxim_max30102_read_reg(uint8_t uch_addr, uint8_t *puch_data)
{

	bool ans;
	uint8_t ch_i2c_data;

	ans = i2cReadMsgBlocking(I2C_READ_ADDR, &ch_i2c_data, 1, uch_addr);
    *puch_data=(uint8_t) ch_i2c_data;

    return ans;
}

bool maxim_max30102_init(void)
{

	  if(!maxim_max30102_write_reg(REG_INTR_ENABLE_1,0xc0)) // INTR setting 0xc0
	    return false;
	  if(!maxim_max30102_write_reg(REG_INTR_ENABLE_2,0x00))
	    return false;
	  if(!maxim_max30102_write_reg(REG_FIFO_WR_PTR,0x00))  //FIFO_WR_PTR[4:0]
	    return false;
	  if(!maxim_max30102_write_reg(REG_OVF_COUNTER,0x00))  //OVF_COUNTER[4:0]
	    return false;
	  if(!maxim_max30102_write_reg(REG_FIFO_RD_PTR,0x00))  //FIFO_RD_PTR[4:0]
	    return false;
	  if(!maxim_max30102_write_reg(REG_FIFO_CONFIG,0x4f))  // 0fsample avg = 1, fifo rollover=false, fifo almost full = 17
	    return false;
	  if(!maxim_max30102_write_reg(REG_MODE_CONFIG,0x03))   //0x02 for Red only, 0x03 for SpO2 mode 0x07 multimode LED
	    return false;
	  if(!maxim_max30102_write_reg(REG_SPO2_CONFIG,0x27))  // SPO2_ADC range = 4096nA, SPO2 sample rate (100 Hz), LED pulseWidth (400uS)
	    return false;

	  if(!maxim_max30102_write_reg(REG_LED1_PA,0x24))   //Choose value for ~ 7mA for LED1
	    return false;
	  if(!maxim_max30102_write_reg(REG_LED2_PA,0x24))   // Choose value for ~ 7mA for LED2
	    return false;
	  if(!maxim_max30102_write_reg(REG_PILOT_PA,0x7f))   // Choose value for ~ 25mA for Pilot LED
	    return false;
	  return true;
	/*
    if(!maxim_max30102_write_reg(REG_INTR_ENABLE_1,0xD0)) // INTR setting
        return false;
    if(!maxim_max30102_write_reg(REG_INTR_ENABLE_2,0x00))
        return false;
    if(!maxim_max30102_write_reg(REG_FIFO_WR_PTR,0x00))  //FIFO_WR_PTR[4:0]
        return false;
    if(!maxim_max30102_write_reg(REG_OVF_COUNTER,0x00))  //OVF_COUNTER[4:0]
        return false;
    if(!maxim_max30102_write_reg(REG_FIFO_RD_PTR,0x00))  //FIFO_RD_PTR[4:0]
        return false;
    if(!maxim_max30102_write_reg(REG_FIFO_CONFIG,0x4f))  //sample avg = 1, fifo rollover=-1, fifo almost full = 17
        return false;
    if(!maxim_max30102_write_reg(REG_MODE_CONFIG,0x07))   //0x02 for Red only, 0x03 for SpO2 mode 0x07 multimode LED
        return false;
    if(!maxim_max30102_write_reg(REG_SPO2_CONFIG,0x04))  // SPO2_ADC range = 4096nA, SPO2 sample rate (100 Hz), LED pulseWidth (400uS)
        return false;
    if(!maxim_max30102_write_reg(REG_LED1_PA,0x24))   //Choose value for ~ 7mA for LED1
        return false;
    if(!maxim_max30102_write_reg(REG_LED2_PA,0x24))   // Choose value for ~ 7mA for LED2
        return false;
    if(!maxim_max30102_write_reg(REG_LED4_PA,0x24))   // Choose value for ~ 7mA for LED2
        return false;
    if(!maxim_max30102_write_reg(REG_PILOT_PA,0x24))   // Choose value for ~ 25mA for Pilot LED
        return false;
    if(!maxim_max30102_write_reg(REG_MULTI_LED_CTRL1,0x21))   // Choose value for ~ 25mA for Pilot LED
        return false;
    if(!maxim_max30102_write_reg(REG_MULTI_LED_CTRL2,0x36))   // Choose value for ~ 25mA for Pilot LED
        return false;
    if(!maxim_max30102_write_reg(REG_PROX_INT_THRESH,0x20))   // Choose value for ~ 25mA for Pilot LED
        return false;
    return true;
    */
}

bool maxim_max30102_read_fifo(uint32_t *pun_red_led, uint32_t *pun_ir_led)
{
    uint32_t un_temp;
    uint8_t uch_temp;
    uint8_t ach_i2c_data[6];
    *pun_red_led=0;
    *pun_ir_led=0;

    static uint8_t counter=0;

    switch (counter){
    case 0:
    	if(i2cgetCompletition() == true){
    		counter++;
    		i2cReadMsg(I2C_READ_ADDR, &uch_temp, 1, REG_INTR_STATUS_1);
    	}
    	break;
    case 1:
    	if(i2cgetCompletition() == true){
    		counter++;
    		i2cReadMsg(I2C_READ_ADDR, ach_i2c_data, 6, REG_FIFO_DATA);
    	}
    	break;
    case 2:
    	if(i2cgetCompletition() == true){
    		counter=1;
    		un_temp=(unsigned char) ach_i2c_data[0];
    		un_temp<<=16;
    		*pun_red_led+=un_temp;
    		un_temp=(unsigned char) ach_i2c_data[1];
    		un_temp<<=8;
    		*pun_red_led+=un_temp;
    		un_temp=(unsigned char) ach_i2c_data[2];
    		*pun_red_led+=un_temp;

    		un_temp=(unsigned char) ach_i2c_data[3];
    		un_temp<<=16;
    		*pun_ir_led+=un_temp;
    		un_temp=(unsigned char) ach_i2c_data[4];
    		un_temp<<=8;
    		*pun_ir_led+=un_temp;
    		un_temp=(unsigned char) ach_i2c_data[5];
    		*pun_ir_led+=un_temp;
    		*pun_red_led&=0x03FFFF;  //Mask MSB [23:18]
    		*pun_ir_led&=0x03FFFF;  //Mask MSB [23:18]

    		i2cReadMsg(I2C_READ_ADDR, &uch_temp, 1, REG_INTR_STATUS_1);
    		return true;
    	}
    	break;
    default:
    	break;
    }

    return false;
}

/*

bool maxim_max30102_read_fifo(uint32_t *pun_red_led, uint32_t *pun_ir_led)
{
  uint32_t un_temp;
  unsigned char uch_temp;
  *pun_red_led=0;
  *pun_ir_led=0;
  uint8_t ach_i2c_data[6];

  //read and clear status register
  maxim_max30102_read_reg(REG_INTR_STATUS_1, &uch_temp);
  maxim_max30102_read_reg(REG_INTR_STATUS_2, &uch_temp);

  i2cReadMsgBlocking(I2C_READ_ADDR, ach_i2c_data, 6, REG_FIFO_DATA);

  un_temp=(unsigned char) ach_i2c_data[0];
  un_temp<<=16;
  *pun_red_led+=un_temp;
  un_temp=(unsigned char) ach_i2c_data[1];
  un_temp<<=8;
  *pun_red_led+=un_temp;
  un_temp=(unsigned char) ach_i2c_data[2];
  *pun_red_led+=un_temp;

  un_temp=(unsigned char) ach_i2c_data[3];
  un_temp<<=16;
  *pun_ir_led+=un_temp;
  un_temp=(unsigned char) ach_i2c_data[4];
  un_temp<<=8;
  *pun_ir_led+=un_temp;
  un_temp=(unsigned char) ach_i2c_data[5];
  *pun_ir_led+=un_temp;
  *pun_red_led&=0x03FFFF;  //Mask MSB [23:18]
  *pun_ir_led&=0x03FFFF;  //Mask MSB [23:18]

  return true;
}

*/
bool maxim_max30102_reset()
{
    if(maxim_max30102_write_reg(REG_MODE_CONFIG,0x40))
        return false;
    else
        return true;
}

